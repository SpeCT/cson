// Generated by CoffeeScript 1.8.0
(function() {
  var CSON, expect, fsUtil, joe, outPath, srcPath;

  joe = require('joe');

  expect = require('chai').expect;

  fsUtil = require('fs');

  CSON = require('../../');

  srcPath = __dirname + '/../../test/src';

  outPath = __dirname + '/../../test/out-expected';

  joe.describe('async', function(describe, it) {
    var createTest, i, testExtension, testExtensions, _i, _len, _results;
    createTest = function(testExtension, i) {
      var actualCsonStr, actualJsonStr, expectedCsonPath, expectedCsonStr, expectedJsonPath, expectedJsonStr, index, obj, requiredObj, srcCsonPath, srcFilename;
      index = i + 1;
      srcFilename = index + '.' + testExtension;
      srcCsonPath = srcPath + '/' + srcFilename;
      expectedJsonPath = outPath + '/' + index + '.json';
      expectedCsonPath = outPath + '/' + index + '.cson';
      obj = null;
      requiredObj = null;
      actualJsonStr = null;
      actualCsonStr = null;
      expectedJsonStr = null;
      expectedCsonStr = null;
      return describe(srcFilename, function(describe, it) {
        it("parse source file", function(done) {
          return CSON.parseFile(srcCsonPath, function(err, _obj) {
            if (err) {
              return done(err);
            }
            obj = _obj;
            return done();
          });
        });
        it("grab conversions", function(done) {
          actualJsonStr = JSON.stringify(obj);
          return CSON.stringify(obj, function(err, _actualCsonStr) {
            if (err) {
              return done(err);
            }
            actualCsonStr = _actualCsonStr;
            return done();
          });
        });
        it("read expectations", function() {
          expectedJsonStr = fsUtil.readFileSync(expectedJsonPath).toString();
          return expectedCsonStr = fsUtil.readFileSync(expectedCsonPath).toString();
        });
        it("compare json", function() {
          return expect(actualJsonStr).to.equal(expectedJsonStr);
        });
        return it("compare cson", function() {
          return expect(actualCsonStr).to.equal(expectedCsonStr);
        });
      });
    };
    testExtensions = ['cson', 'cson', 'cson', 'json', 'coffee', 'js', 'cson', 'cson'];
    _results = [];
    for (i = _i = 0, _len = testExtensions.length; _i < _len; i = ++_i) {
      testExtension = testExtensions[i];
      _results.push(createTest(testExtension, i));
    }
    return _results;
  });

}).call(this);
